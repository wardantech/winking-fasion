<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Expense;
use App\Account;
use App\CashRegister;
use App\ExpenseCategory;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;
use Auth;
use DB;

class ExpenseController extends Controller
{
    public function index()
    {
        $role = Role::find(Auth::user()->role_id);
        if($role->hasPermissionTo('expenses-index')){
            $permissions = Role::findByName($role->name)->permissions;
            foreach ($permissions as $permission)
                $all_permission[] = $permission->name;
            if(empty($all_permission))
                $all_permission[] = 'dummy text';
            $lims_account_list = Account::where('is_active', true)->get();
            $lims_expense_category_all = ExpenseCategory::where('is_active', true)->get();

            if(Auth::user()->role_id > 2 && config('staff_access') == 'own')
                $lims_expense_all = Expense::orderBy('id', 'desc')->where('user_id', Auth::id())->get();
            else
                $lims_expense_all = Expense::orderBy('id', 'desc')->get();
            return view('expense.index', compact('lims_account_list', 'lims_expense_all', 'all_permission','lims_expense_category_all'));
        }
        else
            return redirect()->back()->with('not_permitted', 'Sorry! You are not allowed to access this module');
    }

    public function create()
    {
        //
    }

    public function store(Request $request)
    {
        $data = $request->all();
        $data['reference_no'] = 'er-' . date("Ymd") . '-'. date("his");
        $data['user_id'] = Auth::id();
        $data['warehouse_id'] = 1;
        $cash_register_data = CashRegister::where([
            ['user_id', $data['user_id']],
            ['warehouse_id', $data['warehouse_id']],
            ['status', true]
        ])->first();
        if($cash_register_data)
            $data['cash_register_id'] = $cash_register_data->id;
        Expense::create($data);
        return redirect('expenses')->with('message', 'Data inserted successfully');
    }

    public function show($id)
    {
        //
    }

    public function edit($id)
    {
        $role = Role::firstOrCreate(['id' => Auth::user()->role_id]);
        if ($role->hasPermissionTo('expenses-edit')) {
            $lims_expense_data = Expense::find($id);
            return $lims_expense_data;
        }
        else
            return redirect()->back()->with('not_permitted', 'Sorry! You are not allowed to access this module');
    }

    public function update(Request $request, $id)
    {
        $data = $request->all();
        $lims_expense_data = Expense::find($data['expense_id']);
        $lims_expense_data->update($data);
        return redirect('expenses')->with('message', 'Data updated successfully');
    }

    public function deleteBySelection(Request $request)
    {
        $expense_id = $request['expenseIdArray'];
        foreach ($expense_id as $id) {
            $lims_expense_data = Expense::find($id);
            $lims_expense_data->delete();
        }
        return 'Expense deleted successfully!';
    }

    public function destroy($id)
    {
        $lims_expense_data = Expense::find($id);
        $lims_expense_data->delete();
        return redirect('expenses')->with('not_permitted', 'Data deleted successfully');
    }

    public function expenseFilterGet(Request $request){
       $role = Role::find(Auth::user()->role_id);
        if($role->hasPermissionTo('expenses-index')){
            $permissions = Role::findByName($role->name)->permissions;
            foreach ($permissions as $permission)
                $all_permission[] = $permission->name;
            if(empty($all_permission))
                $all_permission[] = 'dummy text';
            $lims_account_list = Account::where('is_active', true)->get();
            $lims_expense_category_all = ExpenseCategory::where('is_active', true)->get();

            if(Auth::user()->role_id > 2 && config('staff_access') == 'own')
                $lims_expense_all = Expense::orderBy('id', 'desc')->where('user_id', Auth::id())->get();
            else
                $lims_expense_all = Expense::orderBy('id', 'desc')->get();
            return view('expense.index', compact('lims_account_list', 'lims_expense_all', 'all_permission','lims_expense_category_all'));
        }
        else
            return redirect()->back()->with('not_permitted', 'Sorry! You are not allowed to access this module');
    }

    public function expenseFilter(Request $request){

        $start = ' 00:00:00';
        $end = ' 23:59:59';
        $start_date = $request->start_date;
        $end_date = $request->end_date;
        $date_range = $request->date_range;
        $expense_category_id = $request->expense_category_id;

        if($expense_category_id == 0 && ($start_date == null && $start_date == null)){
            return redirect()->back()->with('not_permitted','Please select date range or category type for filtering');
       }

       $role = Role::find(Auth::user()->role_id);
        if($role->hasPermissionTo('expenses-index')){
            $permissions = Role::findByName($role->name)->permissions;
            foreach ($permissions as $permission)
                $all_permission[] = $permission->name;
            if(empty($all_permission))
                $all_permission[] = 'dummy text';
            $lims_account_list = Account::where('is_active', true)->get();
            $lims_expense_category_all = ExpenseCategory::where('is_active', true)->get();

            // if(Auth::user()->role_id > 2 && config('staff_access') == 'own')
            //     $lims_expense_all = Expense::orderBy('id', 'desc')->where('user_id', Auth::id())->get();
            // else
            //     $lims_expense_all = Expense::orderBy('id', 'desc')->get();
            $user_id = Auth::user()->role_id;
            $lims_expense_all = Expense::orderBy('id', 'desc')
                              ->where(function($query) use($user_id){
                                  if($user_id > 2 && config('staff_access') == 'own'){
                                          $query->where('user_id', Auth::id());
                                  }
                              })
                              ->where(function($q) use($expense_category_id,$start_date,$end_date,$start,$end){
                                if($expense_category_id != 0 && $start_date != null && $end_date != null){
                                    return $q->where('expense_category_id',$expense_category_id)
                                               ->whereBetween('created_at',[$start_date.$start,$end_date.$end]);
                                }elseif($start_date != null && $end_date != null){
                                    return $q->whereBetween('created_at',[$start_date.$start,$end_date.$end]);
                                }elseif($expense_category_id != 0){
                                   return $q->where('expense_category_id',$expense_category_id);
                                }
                              })
                              ->get();
            return view('expense.index', compact('lims_account_list', 'lims_expense_all', 'all_permission','lims_expense_category_all','expense_category_id','start_date','end_date','date_range'));
        }
        else
            return redirect()->back()->with('not_permitted', 'Sorry! You are not allowed to access this module');
    }
}
